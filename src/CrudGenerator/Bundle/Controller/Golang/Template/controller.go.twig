package controllers

import (
    "fmt"
    "net/http"
    "github.com/kataras/iris"
    "{{ config.project.package }}/models"
    "{{ config.project.package }}/forms"
    "{{ config.project.package }}/repositories"
    "{{ config.project.package }}/modules/context"
)

{% set tableName = table.name | upperCamelize %}
{% set tableSingleKey = table.name | slice(0,1) %}
{% set table_name = table.name | underscored | replace({'_':'-'}) %}

{% set nameField = table.fieldWithName('name') %}

//{{ tableName }}Controller ...
func {{ tableName }}Controller(app *iris.Application) {

    app.Get("/{{ table_name }}", func(c iris.Context) {

        ctx := context.NewIris(c, "{{ tableName }}.List")
        defer ctx.Close()

        limit, _ := ctx.GetURLParamInt("limit")
        offset, _ := ctx.GetURLParamInt("offset")
        {% if nameField is not empty %}
        query := ctx.GetURLParam("query")
        {% endif %}
        sort := ctx.GetURLParam("sort")
        sortType := ctx.GetURLParam("sort_type")
        repo := repositories.New{{ tableName }}Repository(ctx)

        var err error
        var result models.{{ tableName }}List

        {% if nameField is not empty %}
        if query != "" {
            result, err = repo.SearchList(query, offset, limit)
        } else {
            result, err = repo.List(offset, limit, sort, sortType)
        }
        {% else %}
            result, err = repo.List(offset, limit, sort, sortType)
        {% endif %}
        if err != nil {
            ctx.SendError(http.StatusInternalServerError,err)
            return
        }

        ctx.Header("X-Total", fmt.Sprint(result.Total))
        ctx.Header("X-Offset", fmt.Sprint(result.Offset))
        ctx.Header("X-Limit", fmt.Sprint(result.Limit))
        ctx.SendResponse(http.StatusOK,result)

    })

{% set primaryFieldName = golang.primaryName(table.primaryField.name) | camelize  %}
{% set primaryFieldProperty = primaryFieldName | upperCamelize  %}
{% set primaryFieldParam = table.primaryField.name | camelize %}
{% set primaryFieldType = golang.realType(table.primaryField) %}
{% set primaryFieldTypeRoute = primaryFieldType | replace({'64':''}) %}

    app.Get("/{{ table_name }}/{{ '{' }}{{ primaryFieldParam }}:{{ primaryFieldTypeRoute }}{{ '}' }}",
        func(c iris.Context) {

        ctx := context.NewIris(c, "{{ tableName }}.Get")
        defer ctx.Close()
        {% if primaryFieldType == "string" %}
        id := ctx.GetParam("{{ primaryFieldParam }}")
        {% else %}
        id, _ := ctx.GetParam{{ primaryFieldType | upperCamelize  }}("{{ primaryFieldParam }}")
        {% endif %}
        repo := repositories.New{{ tableName }}Repository(ctx)
        item, err := repo.FindOneBy{{ primaryFieldProperty }}(id)
        if err != nil {
            ctx.SendError(http.StatusNotFound,err)
            return
        }

        ctx.SendResponse(http.StatusOK,item)

    })


    app.Post("/{{ table_name }}", func(c iris.Context) {

        ctx := context.NewIris(c, "{{ tableName }}.Post")
        defer ctx.Close()

        formData := forms.{{ tableName }}Form{}
        err := ctx.ReadForm(&formData)
        if err != nil {
            ctx.SendError(http.StatusBadRequest,err)
            return
        }
        err = formData.IsValid()
        if err != nil {
            ctx.SendError(http.StatusBadRequest, err)
            return
        }
        item := models.{{ tableName }}{}
        itemBinded := ctx.BindRequest(item, formData)

        repo := repositories.New{{ tableName }}Repository(ctx)
        result, err := repo.Create(itemBinded.(models.{{ tableName }}))
        if err != nil {
            ctx.SendError(http.StatusInternalServerError,err)
            return
        }
        ctx.SendResponse(http.StatusOK,result)

    })

    app.Put("/{{ table_name }}/{{ '{' }}{{ primaryFieldParam }}:{{ primaryFieldTypeRoute }}{{ '}' }}",
        func(c iris.Context) {

        ctx := context.NewIris(c, "{{ tableName }}.Put")
        defer ctx.Close()

        repo := repositories.New{{ tableName }}Repository(ctx)
        {% if primaryFieldType == "string" %}
        id := ctx.GetParam("{{ primaryFieldParam }}")
        {% else %}
        id, _ := ctx.GetParam{{ primaryFieldType | upperCamelize }}("{{ primaryFieldParam }}")
        {% endif %}
        item, err := repo.FindOneBy{{ primaryFieldProperty }}(id)
        if err != nil {
            ctx.SendError(http.StatusNotFound,err)
            return
        }

        formData := forms.{{ tableName }}Form{}
        err = ctx.ReadForm(&formData)
        if err != nil {
            ctx.SendError(http.StatusBadRequest,err)
            return
        }
        err = formData.IsValid()
        if err != nil {
            ctx.SendError(http.StatusBadRequest, err)
            return
        }
        itemBinded := ctx.BindRequest(item, formData)

        err = repo.Update(item,itemBinded)
        if err != nil {
            ctx.SendError(http.StatusInternalServerError,err)
            return
        }
        ctx.SendResponse(http.StatusOK,item)

    })

    app.Delete("/{{ table_name }}/{{ '{' }}{{ primaryFieldParam }}:{{ primaryFieldTypeRoute }}{{ '}' }}",
        func(c iris.Context) {

        ctx := context.NewIris(c, "{{ tableName }}.Delete")
        defer ctx.Close()

        repo := repositories.New{{ tableName }}Repository(ctx)
        {% if primaryFieldType == "string" %}
        id := ctx.GetParam("{{ primaryFieldParam }}")
        {% else %}
        id, _ := ctx.GetParam{{ primaryFieldType | upperCamelize }}("{{ primaryFieldParam }}")
        {% endif %}
        item, err := repo.FindOneBy{{ primaryFieldProperty }}(id)
        if err != nil {
            ctx.SendError(http.StatusNotFound,err)
            return
        }

        err = repo.Delete(item)
        if err != nil {
            ctx.SendError(http.StatusInternalServerError,err)
            return
        }

        ctx.SendResponse(http.StatusOK,item)

    })
}
