//Package models ...
package models

{% set createdField = table.fieldWithName('date_created') %}
{% set updatedField = table.fieldWithName('date_updated') %}
import (
{% if createdField is not empty or updatedField is not empty %}
    "time"
{% endif %}
    "github.com/jinzhu/gorm"
    "{{ config.project.package }}/modules/validator"
    "{{ config.project.package }}/modules/util"
    "{{ config.project.package }}/modules/db"
)

{% set tableName = table.name | upperCamelize %}
{% set tableSingleKey = table.name | slice(0,1) %}
{% set table_name = table.name | underscored %}

//{{ tableName }} ...
type {{ tableName }} struct {
{% for field in table.fields  %}{% spaceless %}
    {% set type = golang.realType(field) %}
    {% set column = field.name | underscored %}
    {% set property = golang.primaryName(field.name) | upperCamelize %}
{% endspaceless %}
    {% set allowUseNull = type | contains('time') %}
    {{ property }} {{ field.allowNull and allowUseNull  ? '*' : '' }}{{ type }} `gorm:"column:{{ column}}" json:"{{ column}}{{ field.allowNull ? ',omitempty' : '' }}" form:"{{ column}}"`
{% endfor %}

{% for field in table.foreignFields  %}{% spaceless %}
    {% set type = golang.type(field) %}
    {% set property = field.name | replace({'_id':''}) | upperCamelize %}
    {% set column = field.name | replace({'_id':''})  | underscored %}
    {% set allowNull = field.foreign and field.allowNull  %}
{% endspaceless %}
    {{ property }} {{ allowNull ? '*' : '' }}{{ type }} `gorm:"-" json:"{{ column}}{{ allowNull ? ',omitempty' : '' }}" form:"-" sql:"-"`
{% endfor %}
}

//{{ tableName }}List ...
type {{ tableName }}List struct {
    Total  int      `json:"total" form:"total"`
    Limit  int      `json:"limit" form:"limit"`
    Offset int      `json:"offset" form:"offset"`
    Items  []{{ tableName }} `json:"items" form:"items"`
}

//TableName ...
func ({{ tableName }}) TableName() string {
    return "{{ table_name }}"
}

//BeforeCreate ...
func ({{ tableSingleKey }} *{{ tableName }}) BeforeCreate(scope *gorm.Scope) error {
    {% if createdField is not empty %}
        created := time.Now()
        {{ tableSingleKey }}.DateCreated = {{ createdField.allowNull ? '&' : '' }}created
    {% endif %}
    {% if updatedField is not empty %}
        updated := time.Now()
        {{ tableSingleKey }}.DateUpdated = {{ updatedField.allowNull ? '&' : '' }}updated
    {% endif %}
    return validator.Validate({{ tableSingleKey }})
}

//BeforeUpdate ...
func ({{ tableSingleKey }} *{{ tableName }}) BeforeUpdate(scope *gorm.Scope) error {
    {% if updatedField is not empty %}
        updated := time.Now()
        {{ tableSingleKey }}.DateUpdated = {{ updatedField.allowNull ? '&' : '' }}updated
    {% endif %}
    return validator.Validate({{ tableSingleKey }})
}

//List ...
func ({{ tableSingleKey }} {{ tableName }}) List(offset, limit int) (list {{ tableName }}List, err error) {

    cn, err := db.Setup()
    if err != nil {
        return list, err
    }
    defer cn.Close()

    list = {{ tableName }}List{Limit: limit, Offset: offset}
    qb := cn.Model({{ tableSingleKey }})
    err = {{ tableSingleKey }}.preload(qb).
        Offset(offset).
        Limit(limit).
        Find(&list.Items).
        Error

    if err != nil {
        return list, err
    }
    err = qb.Count(&list.Total).Error
    if err != nil {
        list.Total = len(list.Items)
    }

    return list, nil
}


{% set nameField = table.fieldWithName('name') %}
{% if nameField is not empty %}
//SearchList ...
func ({{ tableSingleKey }} {{ tableName }}) SearchList(query string, offset, limit int) (list {{ tableName }}List, err error) {

    cn, err := db.Setup()
    if err != nil {
        return list, err
    }
    defer cn.Close()

    list = {{ tableName }}List{Limit: limit, Offset: offset}
    qb := {{ tableSingleKey }}.
        preload(cn.Model({{ tableSingleKey }}).
        Offset(offset).
        Limit(limit).
        Where("{{ nameField.name }} LIKE ?", "%"+query+"%"))

    err = qb.Find(&list.Items).
        Error

    if err != nil {
        return list, err
    }
    err = qb.Count(&list.Total).Error
    if err != nil {
        list.Total = len(list.Items)
    }

    return list, nil
}
{% endif %}

{% set primaryFieldName = golang.primaryName(table.primaryField.name) | upperCamelize  %}
{% set primaryFieldProperty = primaryFieldName  %}
{% set primaryFieldParam = primaryFieldName  %}
{% set primaryFieldType = golang.realType(table.primaryField) %}


//FindOneBy{{ primaryFieldProperty }} ...
func ({{ tableSingleKey }} *{{ tableName }}) FindOneBy{{ primaryFieldProperty }}({{ primaryFieldParam }} {{ primaryFieldType }}) error {
    return {{ tableSingleKey }}.FindOne("{{ table.primaryField.name }} = ?",{{ primaryFieldParam }})
}


{% if nameField is not empty %}
{% set nameFieldName = nameField.name | upperCamelize  %}
{% set nameFieldProperty = nameFieldName  %}
{% set nameFieldParam = nameFieldName | camelize  %}
{% set nameFieldType = golang.type(nameField) %}
//FindOneBy{{ nameFieldProperty }} ...
func ({{ tableSingleKey }} *{{ tableName }}) FindOneBy{{ nameFieldProperty }}({{ nameFieldParam }} {{ nameFieldType }}) error {
    return {{ tableSingleKey }}.FindOne("{{ nameField.name }} = ?",{{ nameFieldParam }})
}
{% endif %}
//Create ...
func ({{ tableSingleKey }} *{{ tableName }}) Create() error {

    cn, err := db.Setup()
    if err != nil {
        return err
    }
    defer cn.Close()

    err = cn.Create(&{{ tableSingleKey }}).Error
    if err != nil {
        return err
    }

    return nil

}

//Update ...
func ({{ tableSingleKey }} *{{ tableName }}) Update(data {{ tableName }}) error {

    cn, err := db.Setup()
    if err != nil {
        return err
    }
    defer cn.Close()

    values := util.DiffStruct({{ tableSingleKey }}, &data)
    err = cn.Updates(values).Error
    if err != nil {
        return err
    }

    return nil
}

//Delete ...
func ({{ tableSingleKey }} *{{ tableName }}) Delete() error {

    cn, err := db.Setup()
    if err != nil {
        return err
    }
    defer cn.Close()

    err = cn.Delete(&{{ tableSingleKey }}).Error
    if err != nil {
        return err
    }
    return nil
}

//UpdateSingle ...
func ({{ tableSingleKey }} *{{ tableName }}) UpdateSingle(name string, value interface{}) error {

    cn, err := db.Setup()
    if err != nil {
        return err
    }
    defer cn.Close()

    err = cn.Model(&{{ tableSingleKey }}).Update(name, value).Error
    if err != nil {
        return err
    }

    return nil
}

//FindOne ...
func ({{ tableSingleKey }} *{{ tableName }}) FindOne(query interface{}, args ...interface{}) error {

    cn, err := db.Setup()
    if err != nil {
        return err
    }
    defer cn.Close()

    err = {{ tableSingleKey }}.
        preload(cn.Where(query, args...)).
        First(&{{ tableSingleKey }}).Error
    if err != nil {
        return err
    }
    return nil
}

func ({{ tableSingleKey }} *{{ tableName }}) preload(query *gorm.DB) *gorm.DB {
    return query

}