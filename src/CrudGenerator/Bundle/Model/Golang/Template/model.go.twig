//Package models ...
package models

{% set createdField = table.fieldWithName('date_created') %}
{% set updatedField = table.fieldWithName('date_updated') %}
{% set slugField = table.fieldWithName('slug') %}
{% set nameField = table.fieldWithName('name') %}
import (
{% if createdField is not empty or updatedField is not empty %}
    "time"
{% endif %}
    "github.com/jinzhu/gorm"
    "{{ config.project.package }}/modules/validator"
{% if slugField is not empty and nameField is not empty %}
    "{{ config.project.package }}/modules/util"
{% endif %}
)

{% set tableName = table.name | upperCamelize %}
{% set tableSingleKey = table.name | slice(0,1) %}
{% set table_name = table.name | underscored %}

//{{ tableName }} ...
type {{ tableName }} struct {
{% for field in table.fields  %}{% spaceless %}
    {% set type = golang.realType(field) %}
    {% set column = field.name | underscored %}
    {% set property = golang.primaryName(field.name) | upperCamelize %}
    {% set allowUseNull = (type | contains('time') or field.foreign) %}
    {% set validPrefix = ''  %}
    {% set validSuffix = ''  %}

    {% if field.name | contains('email') %}
        {% set validPrefix = 'email'  %}
    {% endif %}
    {% if field.allowNull and validPrefix is not empty %}
        {% set validSuffix = 'optional'  %}
    {% endif %}
    {% if validSuffix is empty and not field.allowNull %}
        {% set validSuffix = 'required'  %}
    {% elseif validSuffix is empty %}
        {% set validSuffix = '-'  %}
    {% endif %}
    {% if field.primary %}
        {% set validSuffix = '-' %}
    {% endif %}
{% endspaceless %}
    {{ property }} {{ field.allowNull and allowUseNull  ? '*' : '' }}{{ type }} `gorm:"{{ field.primary ? 'primary_key;' : '' }}{{ field.unique ? 'unique;' : '' }}column:{{ column}}" json:"{{ column}}{{ field.allowNull ? ',omitempty' : '' }}" form:"{{ column}}" valid:"{{ validPrefix }}{{ validPrefix is not empty ? ',' : '' }}{{ validSuffix }}"`
{% endfor %}

{% for field in table.foreignFields  %}{% spaceless %}
    {% set type = golang.type(field) %}
    {% set property = field.name | replace({'_id':''}) | upperCamelize %}
    {% set column = field.name | replace({'_id':''})  | underscored %}
    {% set allowNull = field.foreign and field.allowNull  %}
{% endspaceless %}
    {{ property }} {{ allowNull ? '*' : '' }}{{ type }} `gorm:"-" json:"{{ column}}{{ allowNull ? ',omitempty' : '' }}" form:"-" sql:"-"`
{% endfor %}
}

//{{ tableName }}List ...
type {{ tableName }}List struct {
    Total  int      `json:"total" form:"total"`
    Limit  int      `json:"limit" form:"limit"`
    Offset int      `json:"offset" form:"offset"`
    Items  []{{ tableName }} `json:"items" form:"items"`
}

//TableName ...
func ({{ tableName }}) TableName() string {
    return "{{ table_name }}"
}

//BeforeCreate ...
func ({{ tableSingleKey }} *{{ tableName }}) BeforeCreate(scope *gorm.Scope) error {
    {% if createdField is not empty %}
        created := time.Now()
        {{ tableSingleKey }}.{{ createdField.name | upperCamelize }} = {{ createdField.allowNull ? '&' : '' }}created
    {% endif %}
    {% if slugField is not empty and nameField is not empty %}
        if {{ tableSingleKey }}.{{ slugField.name | upperCamelize }}==""{
            {{ tableSingleKey }}.{{ slugField.name | upperCamelize }} = util.Slug({{ tableSingleKey }}.{{ nameField | upperCamelize }})
        }
    {% endif %}

    return validator.Validate({{ tableSingleKey }})
}

//BeforeUpdate ...
func ({{ tableSingleKey }} *{{ tableName }}) BeforeUpdate(scope *gorm.Scope) error {
    {% if updatedField is not empty %}
        updated := time.Now()
        {{ tableSingleKey }}.{{ updatedField.name | upperCamelize }} = {{ updatedField.allowNull ? '&' : '' }}updated
    {% endif %}
    {% if slugField is not empty and nameField is not empty %}
        if {{ tableSingleKey }}.{{ slugField.name | upperCamelize }}==""{
        {{ tableSingleKey }}.{{ slugField.name | upperCamelize }} = util.Slug({{ tableSingleKey }}.{{ nameField | upperCamelize }})
        }
    {% endif %}
    return validator.Validate({{ tableSingleKey }})
}
